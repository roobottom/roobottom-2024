//typescales
#type {
    .make-typescale-up(@counter: 0) when (@counter <= @typescale-up-steps) {
        @min: round(pow(@type-min-scale, @counter) * @type-min-size, 2);
        @max: round(pow(@type-max-scale, @counter) * @type-max-size, 2);
        @size: calc((unit((@min/@base), rem)) + (@max - @min) *var(--fluid-bp));
        
        :root { --step-@{counter}: @size; }
        #type.class(@counter, up);
        #type > .make-typescale-up(@counter + 1); 
    }
    .make-typescale-down(@counter: 1) when (@counter <= @typescale-down-steps) {
        @min: round((@type-min-size / pow(@type-min-scale, @counter)), 2);
        @max: round((@type-max-size / pow(@type-max-scale, @counter)), 2);
        #type.class(@counter, down);
        :root {
            --step--@{counter}: calc((unit((@min/@base), rem)) + (@max - @min) *var(--fluid-bp));
        }
        #type > .make-typescale-down(@counter + 1);  
    }

    .class (@step, @direction) when (@direction = up)  {
      .type-scale-@{step} {
        font-size: ~"var(--step-@{step})";
      }
    }
    .class (@step, @direction) when (@direction =down) {
      .type-scale--@{step} {
        font-size:~"var(--step--@{step})";
      }
    }

    //translate between any steps within the system:
    .steps(@minstep, @maxstep) {
        @min: round(pow(@type-min-scale, @minstep) * @type-min-size, 2);
        @max: round(pow(@type-max-scale, @maxstep) * @type-max-size, 2);
        font-size: calc((unit((@min/@base), rem)) + (@max - @min) *var(--fluid-bp));
    }

    //is this useful? It doesn't respect any scale:
    .sizes(@min, @max) {
        font-size: calc((unit((@min/@base), rem)) + (@max - @min) *var(--fluid-bp));
    }
}
#type > .make-typescale-up;
#type > .make-typescale-down;

#type {
    .style() {
        .link(@color: var(--c-link), @focus: var(--c-link-focus), @hover: var(--c-link-hover), @underline: underline) {
            color: @color;
            text-decoration: @underline;
            padding: var(--space-xxs);
            margin: calc(-1 * var(--space-xxs));
            -webkit-text-decoration: @underline;
            &:hover {
                text-decoration: underline;
                text-decoration-thickness: 5px;
                color: @hover;
                -webkit-text-decoration: underline @hover;
            }
            &:focus {
                outline: 2px solid @focus;
                text-decoration: none;
                color: @focus;
            }
        }
    }
    .family() {
        .default() {
            font-family: @font-default;
        }
        .headline() {
            font-family: @font-heading;
        }
        .alt() {
            font-family: @font-alt;
        }
    }
}

//global typographic settings
body{
    font-size: var(--step-0);
    line-height: var(--line-height);
    #type.family.default;
    font-variant-ligatures: common-ligatures;
    color: var(--c-text);
}

h1, h2, h3, h4 {
    line-height: var(--line-height--tight);
    font-feature-settings: 'kern' 1;
    #type.family.headline;
}

h1, .h1 {
    #type.steps(4, 8);
    overflow-wrap: break-word;
}

h2, .h2 {
    font-size: var(--step-3);
    font-variant: normal;
}

h3, .h3 {
    font-size: var(--step-2);
    font-variant: normal;
}

h4, .h4 {
    font-size: var(--step-1);
}
h5, .h5 {
  font-size: var(--step-0);
  #type.family.default;
  font-variant: normal;
  font-weight: bold;
}
h6, .h6 {
  font-size: var(--step--1);
  #type.family.default;
  font-variant: normal;
  font-variant: small-caps;
}

.link {
  #type.style.link;
}

code {
    #type.family.alt;
}

li code,
p code,
table code {
    background-color: var(--c-code-background);
    padding: 0 0.1em;
    margin: 0 .1em;
    outline: 1px solid var(--c-code-border);
    border-radius: 3px;
}

pre {
    padding: var(--space-s);
    background-color: var(--c-code-background);
    overflow-x: auto;
    border-radius: 3px;
    outline: 1px solid var(--c-code-border);
}

hr {
    border: none;
    margin-left: 0;
    margin-right: 0;
    &:before {
      content: "";
      display: block;
      width: 100%;
      height: 2px;
      background: var(--c-hr);
    }
}

//data tables
table {
  width: 100%;
  background: var(--c-table-background);
  padding: var(--table-padding);

  th, td {
    padding: var(--space-s);
    padding-left: 0;
    border-bottom: 1px solid var(--c-table-border);
    vertical-align: top;
    font-size: var(--step--1);
  }

  td, th[scope='row'] {
    #type.family.alt;
    font-weight: normal;
  }

  tr:last-child td {
    border-bottom: none;
  }

}

//prose
.prose {
    //vertical spacing
    >*+* {
        margin-top: var(--space-s);
    }

    >*+h2,
    .quote,
    >.quote+* {
        margin-top: var(--space-xxl);
    }

    blockquote:not(.quote),
    >blockquote:not(.quote)+*,
    .example {
        margin-top: var(--space-m);
    }

    hr {
      margin-top: var(--space-l);
      margin-bottom: var(--space-l);
    }

    >*+h3,
    >*+h4 {
        margin-top: var(--space-m);
    }
    .gallery:not(.gallery--left):not(.gallery--right),
    .gallery:not(.gallery--left):not(.gallery--right)+p,
    >figure:not(.right), >figure:not(.right)+p {
      margin-top: var(--space-m);
    }
    .gallery--left,
    .gallery--right {
        margin-top: var(--space-s);
    }
    >h3+p,
    >h4+p {
        margin-top: var(--space-xs);
    }
    >h2+h3,
    >h2+h4 {
        margin-top: var(--space-s);
    }

    ul:not(.list):not(.pallet),
    ol:not(.list):not(.pallet) {
      li+li,
      li>ul,
      li>ol {
        margin-top: var(--space-xs);
      }
    
      li {
        margin-left: 1em;
        padding-left: var(--space-xs);
      }
    }
    

    ul:not(.list):not(.pallet) > li {
        list-style-image: ~"url(@{path-images}bullet.svg)";
    }

    a:not(.example-tab-link):not(.example-open-link) {
        #type.style.link();
    }

    blockquote:not(.quote) {
        border-left: 6px solid var(--c-grey-light);
        #type.family.headline;
        font-size: var(--step-1);
        line-height: var(--line-height--tight);
        >p {
            text-indent: -.5em;
            padding-left: 1em;
            @supports (hanging-punctuation: first) {
                hanging-punctuation: first;
                text-indent: 0;
            } 
        }
    }

    //shift pre back inline with body text, but only as a direct child of .prose 
    > pre {
      margin-left: calc(-1 * var(--space-s));
    }

    //autoflow
    body:not(.section-kanga) &--flow {

      >p,
      >ul:not(.list),
      >ol,
      >hr,
      >table,
      >h2,
      >h3,
      >h4,
      >h5,
      >h6,
      blockquote:not(.quote),
      >figure:not(.full):not(.wide):not(.right) {
        #container.prose-flow;
      }
    }

}

@media only screen and (min-width: 750px) { //match .gallery bp
    .prose {
        .gallery--left,
        .gallery--right {
            margin-top: 0;
            margin-bottom: var(--space-m); //space right/left images away from others
        }
    }
}